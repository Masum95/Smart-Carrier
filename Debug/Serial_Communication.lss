
Serial_Communication.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  0000012a  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000594  00000000  00000000  000001a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000b69  00000000  00000000  00000734  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000129d  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000012b0  2**2
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 84 00 	call	0x108	; 0x108 <main>
  64:	0c 94 93 00 	jmp	0x126	; 0x126 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <UART_Init>:
#include <util/delay.h>
#define USART_BaudRate 9600
#define BAUD_PRESCALE  (F_CPU / (USART_BaudRate *16L) -1)

void UART_Init()
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	UCSRB |= (1<<RXEN) | (1<<TXEN);
  74:	8a e2       	ldi	r24, 0x2A	; 42
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	2a e2       	ldi	r18, 0x2A	; 42
  7a:	30 e0       	ldi	r19, 0x00	; 0
  7c:	f9 01       	movw	r30, r18
  7e:	20 81       	ld	r18, Z
  80:	28 61       	ori	r18, 0x18	; 24
  82:	fc 01       	movw	r30, r24
  84:	20 83       	st	Z, r18
	UCSRC |= (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);  // 8 BIT CHARACTER
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	20 e4       	ldi	r18, 0x40	; 64
  8c:	30 e0       	ldi	r19, 0x00	; 0
  8e:	f9 01       	movw	r30, r18
  90:	20 81       	ld	r18, Z
  92:	26 68       	ori	r18, 0x86	; 134
  94:	fc 01       	movw	r30, r24
  96:	20 83       	st	Z, r18
	UBRRL = BAUD_PRESCALE;
  98:	89 e2       	ldi	r24, 0x29	; 41
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	23 e3       	ldi	r18, 0x33	; 51
  9e:	fc 01       	movw	r30, r24
  a0:	20 83       	st	Z, r18
	UBRRH = (BAUD_PRESCALE >> 8) ;
  a2:	80 e4       	ldi	r24, 0x40	; 64
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	fc 01       	movw	r30, r24
  a8:	10 82       	st	Z, r1

}
  aa:	df 91       	pop	r29
  ac:	cf 91       	pop	r28
  ae:	08 95       	ret

000000b0 <UART_RxCHAR>:

unsigned char UART_RxCHAR()
{
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	cd b7       	in	r28, 0x3d	; 61
  b6:	de b7       	in	r29, 0x3e	; 62
	while((UCSRA & 1<<RXC)==0);
  b8:	00 00       	nop
  ba:	8b e2       	ldi	r24, 0x2B	; 43
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	fc 01       	movw	r30, r24
  c0:	80 81       	ld	r24, Z
  c2:	88 23       	and	r24, r24
  c4:	d4 f7       	brge	.-12     	; 0xba <UART_RxCHAR+0xa>
	return UDR;
  c6:	8c e2       	ldi	r24, 0x2C	; 44
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	fc 01       	movw	r30, r24
  cc:	80 81       	ld	r24, Z
}
  ce:	df 91       	pop	r29
  d0:	cf 91       	pop	r28
  d2:	08 95       	ret

000000d4 <UART_TxCHAR>:

void UART_TxCHAR(char ch)
{
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	1f 92       	push	r1
  da:	cd b7       	in	r28, 0x3d	; 61
  dc:	de b7       	in	r29, 0x3e	; 62
  de:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & 1<<UDRE));
  e0:	00 00       	nop
  e2:	8b e2       	ldi	r24, 0x2B	; 43
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	fc 01       	movw	r30, r24
  e8:	80 81       	ld	r24, Z
  ea:	88 2f       	mov	r24, r24
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	80 72       	andi	r24, 0x20	; 32
  f0:	99 27       	eor	r25, r25
  f2:	89 2b       	or	r24, r25
  f4:	b1 f3       	breq	.-20     	; 0xe2 <UART_TxCHAR+0xe>
	UDR = ch;
  f6:	8c e2       	ldi	r24, 0x2C	; 44
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	29 81       	ldd	r18, Y+1	; 0x01
  fc:	fc 01       	movw	r30, r24
  fe:	20 83       	st	Z, r18
}
 100:	0f 90       	pop	r0
 102:	df 91       	pop	r29
 104:	cf 91       	pop	r28
 106:	08 95       	ret

00000108 <main>:

int main(void)
{
 108:	cf 93       	push	r28
 10a:	df 93       	push	r29
 10c:	cd b7       	in	r28, 0x3d	; 61
 10e:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0xFF;
 110:	8a e3       	ldi	r24, 0x3A	; 58
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	2f ef       	ldi	r18, 0xFF	; 255
 116:	fc 01       	movw	r30, r24
 118:	20 83       	st	Z, r18
	PORTA = 0xFF;
 11a:	8b e3       	ldi	r24, 0x3B	; 59
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
	while(1);
 124:	ff cf       	rjmp	.-2      	; 0x124 <main+0x1c>

00000126 <_exit>:
 126:	f8 94       	cli

00000128 <__stop_program>:
 128:	ff cf       	rjmp	.-2      	; 0x128 <__stop_program>
